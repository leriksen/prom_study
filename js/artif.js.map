{
  "version": 3,
  "file": "artif.js",
  "sourceRoot": "../src/",
  "sources": [
    "artif.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "request = require 'request-promise'\nmerge = require 'merge'\ncommandLineArgs = require 'command-line-args'\n\noptionDefinitions = [\n  name: 'repo'\n  alias: 'r'\n  type: String\n,\n  name: 'layout'\n  alias: 'l'\n  type: String\n\n,\n  name: 'package'\n  alias: 'p'\n  type: String\n]\n\noptions = commandLineArgs(optionDefinitions)\n\nrepoVariants = [\n  'build',\n  'verify',\n  'release'\n]\n\ngroupVariants = [\n  'build-users'\n  'build-svc'\n  'read'\n  'release-users'\n  'release-svc'\n]\n\n# copy\npermissionVariants = repoVariants.slice()\n\npermisionsMap =\n  build:\n    'build-users':   ['r', 'w', 'n']\n    'build-svc':     ['r', 'w', 'n']\n    'read':          ['r']\n    'release-users': ['r', 'w']\n    'release-svc':   ['r', 'w']\n  verify: {}\n  release:\n    'build-users':   ['r', 'w', 'n']\n    'build-svc':     ['r','w']\n    'read':          ['r']\n    'release-users': ['r', 'w', 'n']\n    'release-svc':   ['r', 'w']\n\nanyRemotePerms =\n  build:\n    'build-users':   ['r', 'w']\n    'build-svc':     ['r', 'w']\n\n# Setting URL and headers for request\noptions =\n  headers:\n    'User-Agent': 'node/request'\n    resolveWithFullResponse: true\n    simple: false\n    headers:\n      'X-JFrog-Art-Api': \"os.env.ARTIFACTORY_API_KEY\"\n\n# add support for dev and test envs at some point\n\nbaseURL = \"https://github.aus.thenational.com/api/\"\n\npingEndpoint = baseURL + \"system/ping\"\nrepoEndpoint = baseURL + \"repositories/\"\ngroupEndoint = baseURL + \"security/groups/\"\npermEndpoint = baseURL + \"security/permissions/\"\n\nrequiredRepos = []\nrequiredGroups = []\nrequiredPerms = []\n\ncheckPing = () =>\n  request merge options,\n    url: pingEndpoint\n  .then (response) =>\n    if response.statusCode is not 200\n      throw new Error response.message\n\ncheckRepos = (repo) =>\n  Promise.all repoVariants.map (variant) =>\n    checkRepo \"#{repo}-#{variant}\"\n\ncheckRepo = (repo) =>\n  console.log \"checking repo #{repo}\"\n  request merge options,\n    url: repoEndpoint + repo\n  .then (response) =>\n    console.log \"#{repo} exists, no creation required\"\n    undefined\n  .catch (err) =>\n    console.log \"caught error for user #{user}\", err.message\n    console.log \"add #{repo} to list of repos requiring creation\"\n    repo\n\ncheckFollowers = (followerURLS) =>\n  Promise.all followerURLS.map (followerUrl) =>\n    checkFollower followerUrl\n\ncheckFollower = (hasFollowerURL) =>\n  url = hasFollowerURL.followers_url\n  request merge options,\n    url: url\n  .then (response) =>\n    {\n      user: url\n      followers: JSON.parse response\n    }\n  .catch (err) =>\n    console.log \"caught error for url #{url}\", err.message\n    {}\n\ncheckPing()\n.then (result) =>\n  checkRepos options.repo\n.then (results) =>\n#  get just the ones with non-200 responses\n  requiredRepos = results.filter (result) =>\n    result is not undefined\n.then (requiredRepos) =>\n  console.log \"the following repos will be built\"\n  buildRepos requiredRepos\n\n.then () =>\n  checkGroups options.repo\n.then (results) =>\n  requiredGroups = results.filter (result) =>\n    result is not undefined\n\n.then () =>\n  checkPermisssions options.repo\n.then (results) =>\n  requiredPermissions = results.filter (result) =>\n    result is not undefined\n\n.catch (err) =>\n  console.error \"an error occurred - \", err.message"
  ]
}